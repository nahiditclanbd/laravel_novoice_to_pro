# Save Data
- $company = new Company
- $company->website = 'test.me';
- $company->save() //return true
- $company->website = 'Nahidul.me';
- $company->save() 

# Get Data
- Company::take(3)->get()->all()
- Company::find([1,2,3,4])

# Alternative of where a query
- Company::where('website', 'www.test.com')->first()
- Company::whereWebsite('www.test.com')->first()

# Delete the Record without instantiating an object
- Company::destory(11) //return 1
- Company::destory([1, 2, 4]) //return 3
- $company->delete()

# Eloquent insertion and update
- $company = Company::first()
- $contact = new contact
- $company->contact()->save($contact)
- $company->contact()->create($contact)
- $contact = [$contact1, $contact2]
- $company->contact()->saveMany($contact)
- $company->contact()->createMany($contact)

# Querying Relationships
- $company->contact()->get() // return all contacts of company
- $company->contact()->find(7)

# model factories
- company_id = Company::pluck('id')->random()
- Contact::factory()->create()
- Contact::factory()->count(10)->create()
- Contact::factory()->make()
- Laravel create method is created the model instance and save data in the database.
Make function has created the instance of the class.

# Factory Relationships

- Let's say we want to create a company that has 3 contacts. Here we can use has method that provided by the Laravel's factories. The has method receives a factory instance, in this case we can specify the Contact factory instance.

- $company = Company::factory()->has(
  Contact::factory()->count(3)
)->create()

- Now, to create let's say 10 companies, and for each company we want to generate 3 contacts, we can call count method before create method call and specify the number.

Company::factory()->has(
  Contact::factory()->count(3)
)
  ->count(10)
  ->create()

